{
  "basePath": "/v2",
  "paths": {
    "/resolve": {
      "GET": {
        "parameters": [
          {
            "in": "query",
            "name": "checkin",
            "description": "A complete check-in object.",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "//nyt.com": {
      "POST": {
        "parameters": [
          {
            "in": "query",
            "name": "list",
            "description": "item The updated list item .",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "//blog.zagat.com/fast-food-survey-results-are-here": {
      "POST": {
        "parameters": [
          {
            "in": "query",
            "name": "tip",
            "description": "The newly-added tip .",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "/v2/lists/12381902N)": {
      "GET": {
        "parameters": [
          {
            "in": "query",
            "name": "list",
            "description": "A list object.",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "//www.mercurylounge.com": {
      "post": {},
      "POST": {}
    },
    "//swarmapp.com/c": {
      "GET": {
        "parameters": [
          {
            "in": "query",
            "name": "checkin",
            "description": "The check-in associated with this shortId.",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "//api.foursquare.com/v2": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "checkins",
            "description": "An array of checkin objects with user details present. Usually, venue details are also present, depending on whether the checkin has a venue.",
            "type": "integer",
            "required": "required"
          }
        ]
      },
      "POST": {
        "parameters": [
          {
            "in": "query",
            "name": "comment",
            "description": "The newly-created comment.",
            "type": "integer",
            "required": "required"
          }
        ]
      },
      "del": {
        "parameters": [
          {
            "in": "query",
            "name": "checkin",
            "description": "The checkin, minus this comment.",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "//your.site.com/path": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "photo",
            "description": "The photo that was just created.",
            "type": "integer",
            "required": "required"
          }
        ]
      },
      "POST": {}
    },
    "/venues/search": {
      "DEL": {},
      "del": {
        "parameters": [
          {
            "in": "query",
            "name": "responses",
            "description": "An array in which an entry exists for each response, in the order passed in.",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "/variations": {
      "GET": {
        "parameters": [
          {
            "in": "query",
            "name": "venues",
            "description": "An array of compact venues .",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "/XXX/photos": {
      "GET": {},
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "A unique identifier for this user. ✓ ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "firstName",
            "description": "A user's first name. ✓ ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "lastName",
            "description": "A user's last name. ✓ ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "photo",
            "description": "Contains prefix and suffix , similar to the format for photo . Accepted sizes are 36x36, 100x100, 300x300, and 500x500 . ✓ ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "relationship",
            "description": "The relationship of the acting user (me) to this user (them). One of self , friend , pendingMe (user has sent a friend request that acting user has not accepted), pendingThem (acting user has sent a friend request to the user but they have not accepted), or followingThem (acting user is following a celebrity or page). If there is no relationship or pending request between the two users, the node is absent. If the acting user is a celebrity, does not indicate whether the user is following them.\n\nIf pendingme , applications will want to the acting user to an approve/ignore action. If pendingthem , applications will want to show the acting user a \"pending\" message. ○ ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "friends",
            "description": "Contains count of friends for this user and groups of users who are friends. Right now will only contain a group where type is friends , but it's subject to change. Groups are omitted when viewing self The full set of friends is at users/XXX/friends . ○ ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "type",
            "description": "Present for non-standard user types. One of page , chain , celebrity , or venuePage . Pages are brand pages, such as Bravo , chains are pages that own a set of venues, like Starbucks , celebrities are users that other users can follow, like Mario Batali , and venuePages represent single venues creating content, such as My ArenA creating updates. venuePage's do not really have a user profile, show the veue page instead. ○ ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "venue",
            "description": "For venuePage users, this field just contains an id for the relevant venue. ○ ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "homeCity",
            "description": "User's home city ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "gender",
            "description": "male , female , or none ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "contact",
            "description": "An object containing none, some, or all of twitter , facebook , email , and phone . Both are strings. ✓ ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "bio",
            "description": "A short bio for the user. ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "tips",
            "description": "In compact users, if present, contains the count of tips from this user. In full users, contains count and an array of selected tips as items , which may or may not be empty. Full set of items at users/XXX/tips ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "lists",
            "description": "If this user has lists, groups contains created for lists created by this user. In compact, just the count is provided, and in full, some sample lists are included. In full form, lists also contains a count of the lists created and followed by this user. Full set of items at users/XXX/lists ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "followers",
            "description": "If this user can have followers (i.e. it's a celebrity, venue, or page), contains count of followers for this user in compact, and, in detail, groups of users who follow this user, split into friends and others . ○ ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "following",
            "description": "groups of pages this user has followed. ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "mayorships",
            "description": "Contains the count of mayorships for this user and an items array that for now is empty. Use users/XXX/mayorships to get actual mayorships. ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "photos",
            "description": "Contains the count of photos this user has. May contain an array of selected photos as items , full set of items at users/XXX/photos , but only visible to self. ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "scores",
            "description": "Contains recent , max , checkinsCount , and goal for showing user's current game status. ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "checkins",
            "description": "Contains the count of checkins by this user. May contain the most recent checkin as an array items containing a single element, if the user is a friend. Users can fetch users/XXX/checkins for their own complete history. ✓",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "pageInfo",
            "description": "Contains a detailed page , if they are a page. ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "pings",
            "description": "Whether we receive pings from this user, if we have a relationship. ○",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "requests",
            "description": "Contains count of pending friend requests for this user. ○",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    }
  },
  "produces": "application/json",
  "host": "api.foursquare.com",
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": "This is the information of the API"
}