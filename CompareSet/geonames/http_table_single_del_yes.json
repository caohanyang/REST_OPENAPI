{
  "basePath": "/",
  "paths": {
    "postalCodeLookupJSON": {
      "POST": {},
      "get": {}
    },
    "siblings": {
      "POST": {}
    },
    "export/geonamesData.js": {
      "PUT": {}
    },
    "search": {
      "POST": {},
      "Post": {
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "description": "string ( q , name or name_equals required) search over all attributes of a place : place name, country name, continent, admin codes,... ( Important: urlencoded utf8 )",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "name",
            "description": "string ( q , name or name_equals required) place name only( Important: urlencoded utf8 )",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "name_equals",
            "description": "string ( q , name or name_equals required) exact place name",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "name_startsWith",
            "description": "string (optional) place name starts with given characters",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "maxRows",
            "description": "integer (optional) the maximal number of rows in the document returned by the service. Default is 100, the maximal allowed value is 1000.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "startRow",
            "description": "integer (optional) Used for paging results. If you want to get results 30 to 40, use startRow=30 and maxRows=10. Default is 0, the maximal allowed value is 5000 for the free services and 25000 for the premium services",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "country",
            "description": "string : country code, ISO-3166 (optional) Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "countryBias",
            "description": "string (option), two letter country code ISO-3166 records from the countryBias are listed first",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "continentCode",
            "description": "string : continent code : AF,AS,EU,NA,OC,SA,AN (optional) restricts the search for toponym of the given continent.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "adminCode1",
            "description": ", adminCode2 , adminCode3 string : admin code (optional) code of administrative subdivision",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "featureClass",
            "description": "character A , H , L , P , R , S , T , U , V (optional) featureclass(es) (default= all feature classes); this parameter may occur more than once, example: featureClass=P&featureClass=A",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "featureCode",
            "description": "string (optional) featurecode(s) (default= all feature codes); this parameter may occur more than once, example: featureCode=PPLC&featureCode=PPLX",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "cities",
            "description": "string (optional) optional filter parameter with three possible values 'cities1000', 'cities5000','cities15000' used to categorize the populated places into three groups according to size/relevance. See the download readme for further infos\n",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "lang",
            "description": "string ISO-636 2-letter language code; en , de , fr , it , es ,... (optional) place name and country name will be returned in the specified language. Default is English. Feature classes and codes are only available in English and Bulgarian. Any help in translating is welcome.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "type",
            "description": "string xml , json , rdf the format type of the returned document, default = xml",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "style",
            "description": "string SHORT , MEDIUM , LONG , FULL (optional) verbosity of returned xml document, default = MEDIUM",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "isNameRequired",
            "description": "boolean (optional) At least one of the search term needs to be part of the place name. Example : A normal search for Berlin will return all places within the state of Berlin. If we only want to find places with 'Berlin' in the name we set the parameter isNameRequired to 'true'. The difference to the name_equals parameter is that this will allow searches for 'Berlin, Germany' as only one search term needs to be part of the name.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "tag",
            "description": "string (optional) search for toponyms tagged with the specified tag",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "operator",
            "description": "string (optional) default is 'AND', with the operator 'OR' not all search terms need to be matched by the response",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "charset",
            "description": "string (optional) default is 'UTF8', defines the encoding used for the document returned by the web service.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "fuzzy",
            "description": "float (optional) default is '1', defines the fuzziness of the search terms. float between 0 and 1. The search term is only applied to the name attribute.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "east,west,north,south",
            "description": "float (optional) bounding box, only features within the box are returned",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "searchlang",
            "description": "string (optional) in combination with the name parameter, the search will only consider names in the specified language. Used for instance to query for IATA airport codes.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "orderby",
            "description": "string (optional)[population,elevation,relevance] in combination with the name_startsWith, if set to 'relevance' than the result is sorted by relevance.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "inclBbox",
            "description": "string (option) [true] include Bbox info, regardelss of style setting. (normally only included with style=FULL",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "wikipediaBoundingBox": {
      "POST": {}
    },
    "cities": {
      "POST": {}
    },
    "findNearByWeatherXML": {
      "POST": {}
    },
    "postalCodeSearchJSON": {
      "DEL": {},
      "deL": {
        "parameters": [
          {
            "in": "query",
            "name": "postalcode",
            "description": "string ( postalcode or placename required) postal code",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "postalcode_startsWith",
            "description": "string the first characters or letters of a postal code",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "placename",
            "description": "string ( postalcode or placename required) all fields : placename,postal code, country, admin name ( Important: urlencoded utf8 )",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "placename_startsWith",
            "description": "string the first characters of a place name",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "country",
            "description": "string : country code, ISO-3166 (optional) Default is all countries. The country parameter may occur more than once, example: country=FR&country=GP",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "countryBias",
            "description": "string records from the countryBias are listed first",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "maxRows",
            "description": "integer (optional) the maximal number of rows in the document returned by the service. Default is 10",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "style",
            "description": "string SHORT , MEDIUM , LONG , FULL (optional) verbosity of returned xml document, default = MEDIUM",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "operator",
            "description": "string AND , OR (optional) the operator 'AND' searches for all terms in the placename parameter, the operator 'OR' searches for any term, default = AND",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "charset",
            "description": "string (optional) default is 'UTF8', defines the encoding used for the document returned by the web service.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "isReduced",
            "description": "true or false (optional) default is 'false', when set to 'true' only the UK outer codes are returned. Attention: the default value on the commercial servers is currently set to 'true'. It will be changed later to 'false'.",
            "type": "integer",
            "required": "required"
          },
          {
            "in": "query",
            "name": "east,west,north,south",
            "description": "float (optional) bounding box, only features within the box are returned",
            "type": "integer",
            "required": "required"
          }
        ]
      }
    },
    "postalCodeCountryInfo": {
      "POST": {}
    },
    "http://www.maxmind.com/.": {
      "POST": {}
    },
    "postalCodeSearch": {
      "POST": {}
    }
  },
  "produces": "application/json",
  "host": "api.geonames.org",
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": "This is the information of the API"
}