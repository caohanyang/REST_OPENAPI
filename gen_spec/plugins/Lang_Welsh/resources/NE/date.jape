/*
*  time.jape
*
* Copyright (c) 1998-2004, The University of Sheffield.
*
*  This file is part of GATE (see http://gate.ac.uk/), and is free
*  software, licenced under the GNU Library General Public License,
*  Version 2, June 1991 (in the distribution as file licence.html,
*  and also available at http://gate.ac.uk/gate/licence.html).
*
*  Diana Maynard, 10 Sep 2001
* 
*  $Id: date.jape 17311 2014-02-14 18:49:50Z dgmaynard $
*/


Phase:	Time
Input: Token Lookup
Options: control = appelt


/////////////////////////////////////////////////

Macro: DAY_NAME 
({Lookup.minorType == day })

Macro: ONE_DIGIT
({Token.kind == number, Token.length == "1"})

Macro: TWO_DIGIT
({Token.kind == number, Token.length == "2"})

Macro: FOUR_DIGIT
({Token.kind == number, Token.length == "4"})

Macro: DAY_MONTH_NUM
(ONE_DIGIT | TWO_DIGIT)

Macro: DATE_PRE
// possible modifiers of dates, eg. "early October"
// macro modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
// early, mid, late yn gynnar, yng nghanol, yn hwyr
(
 (
  ({Token.string == "yn"}{Token.string == "gynnar"})|
  ({Token.string == "yng"}{Token.string == "nghanol"})|
  ({Token.string == "yn"}{Token.string == "hwyr"})
 )
 ({Token})? // Token for yn or ym eg. early (in) September â€“ yn gynnar ym mis Medi 
)

Macro: DAY 
(((DATE_PRE)?
  DAY_NAME) |
 DAY_MONTH_NUM)

Macro: MONTH_NAME
( (DATE_PRE)?
  ({Token.string == "mis"})?
  {Lookup.minorType == month})

Macro: MONTH 
(MONTH_NAME | DAY_MONTH_NUM)

Macro: SLASH
  ({Token.string == "/"})
  
Macro: DASH
  {Token.string == "-"}

Macro: DOT
  {Token.string == "."}

Macro: OF
  {Token.string == "of"}

// macro modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
Macro: AD_BC
	(  {Token.string == "cc"} | {Token.string == "CC"}
	|
	  ({Token.string == "c"} {Token.string == "."}
	   {Token.string == "c"} {Token.string == "."})
	|
	  ({Token.string == "c"} {Token.string == "."}
	   {Token.string == "c"} {Token.string == "."})
	|

	  {Token.string == "oc"} | {Token.string == "OC"}
	|
	  ({Token.string == "o"} {Token.string == "."}
	   {Token.string == "c"} {Token.string == "."})
	 
	|
 	  ({Token.string == "O"} {Token.string == "."}
	   {Token.string == "C"} {Token.string == "."})
	)

Macro: YEAR
(        
 {Lookup.majorType == year}|
 TWO_DIGIT | FOUR_DIGIT | 
 {Token.string == "'"}
 (TWO_DIGIT)
)

// macro modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
Macro:	XDAY
(
 ({Token.string == "Dydd"}|{Token.string == "DYDD"}|{Token.string == "ddydd"}|{Token.string == "DDYDD"})
 ({Token.orth == upperInitial} |
  {Token.orth == allCaps})
)

// macro modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
Macro: ORDINAL
(
   ({Token.string ==~ "[0-9][0-9]?(af|ail|ydd|ed|fed|eg|ain|au)"}
    |
   {Lookup.minorType == ordinal})
)

Macro: NUM_OR_ORDINAL
  (ORDINAL | DAY_MONTH_NUM)


Macro: COMMA
({Token.string == ","})


Macro:  TIME_ZONE
(({Lookup.minorType == zone})|
 ({Token.string == "("}
  {Lookup.minorType == zone}
  {Token.string == ")"})
)

Macro: TIME_DIFF
(
 ({Token.string == "+"}|{Token.string == "-"})
 (FOUR_DIGIT)
)

Macro: TIME_AMPM
(
 {Lookup.minorType == ampm}
)




///////////////////////////////////////////////////////////////
// Time Rules 

Rule: TimeDigital1
// 20:14:25
(
 (ONE_DIGIT|TWO_DIGIT){Token.string == ":"} TWO_DIGIT 
({Token.string == ":"} TWO_DIGIT)?
(TIME_AMPM)?	
(TIME_DIFF)?
(TIME_ZONE)? 
)
:time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigital1"}


Rule:	TimeDigital2

// 8:14 am
// 4.34 pm
// 6am
// The grammar uses the Welsh am-pm equivalent from the gazetteer list
(
 (ONE_DIGIT|TWO_DIGIT) 
 (({Token.string == ":"}|{Token.string == "."} |{Token.string == "-"} )
  TWO_DIGIT)?
 (TIME_AMPM)
 (TIME_ZONE)?
)
:time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigital"}


Rule: TimeOClock
// ten o'clock
// modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
(
 {Lookup.minorType == hour}
 {Token.string == "o"}
 {Token.string == "'r"}
 {Token.string == "gloch"}
)
:time 
-->
 :time.TempTime = {kind = "positive", rule = "TimeOClock"}


Rule: TimeAnalogueWelshA
// chwarter awr wedi pump
// chwarter awr i bump
// hanner awr wedi pump

(
  ({Token.string == "chwarter"} | 
   {Token.string == "hanner"}) 
   {Token.string == "awr"}
  ({Token.string == "i"} | 
   {Token.string == "wedi"})
  {Lookup.minorType == hour}
)
:time 
-->
 :time.TempTime = {kind = "positive", rule = "TimeAnalogueWelshA"}

Rule: TimeAnalogueWelshB
// ugain munud i bump
// ugain munud wedi pump
// bump munud ar hugain i bump

(
 (({Lookup.majorType == number})?
    {Lookup.majorType == number})
  {Token.string == "munud"}
   ({Token.string == "ar"}{Lookup.majorType == number})?
   ({Token.string == "i"} | 
   {Token.string == "wedi"})
  {Lookup.minorType == hour}
)
:time 
-->
 :time.TempTime = {kind = "positive", rule = "TimeAnalogueWelshB"}

Rule: TimeWordsContext
Priority: 50
// seven thirty tomorrow

(
 {Lookup.majorType == number}
 (
  {Lookup.majorType == number}
 )?
):time1
(
 {Lookup.minorType == time_key}
) 
-->
:time1.TempTime = {kind = "positive", rule = "TimeWordsContext"}


Rule: TimeWords

(
 {Lookup.majorType == number}
 (
  {Lookup.majorType == number}
 )?
)
:time
-->
  :time.TempTime = {kind = "timeWords", rule = "TimeWords"}

  


Rule: TimeDigitalContext1

(
(FOUR_DIGIT)
):time
{Lookup.minorType == time_key}
 -->
 :time.TempTime = {kind = "positive", rule = "TimeDigitalContext"}

Rule: NotTimeDigitalContext2
Priority: 100
// prevent things like "at 0.61 km/h"
// modified for the purposes of CYMRIE - Andreas Vlachidis February 2016

(
 {Token.string == "am"}
)
({Token.string == "0"}
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 (TIME_AMPM)?
 (TIME_ZONE)?
)
:time
 -->
 :time.Temp = {rule = "NotTimeDigitalContext2"}


Rule: TimeDigitalContext2

(
 {Token.string == "am"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
 (TIME_AMPM)?
 (TIME_ZONE)?
)
:time
 -->
 :time.TempTime = {kind = "positive", rule = "TimeDigitalContext2"}

Rule: TimeDigitalTemp1

(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
)
:time
 -->
 :time.TempTime = {kind = "temp", rule = "TimeDigitalTemp"}

Rule: TimeDigitalContext1
// modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
(
 {Token.string == "mewn"}
)?
((ONE_DIGIT|TWO_DIGIT)
 ({Token.string == ":"}|{Token.string == "."})
 TWO_DIGIT
 ({Token.string == "eilfedau"}|
  {Token.string == "munud"}|
  {Token.string == "oriau"}
 )
):time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigitalContext1"}



Rule: TimeDigitalContextConj

(
 {Token.string == "am"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
)
:time1
(
 {Token.string == "a"}|{Token.string == "ac"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
):time2
 -->
 :time1.TempTime = {kind = "positive", rule = "TimeDigitalContextConj"},

:time2.TempTime = {kind = "positive", rule = "TimeDigitalContextConj"}




//////////////////////////////////////////////////////////////////

// Date Rules

//Rule: IgnoreDatePerson
//Priority: 500
//(
// {Date}
// {Person}
//)
//:date
//-->
//{}



Rule:	DateSlash           // UK only
// Wed, 10/July/00
// 10/July
// July/99

(
 ((DAY_NAME (COMMA)? )?
 NUM_OR_ORDINAL SLASH MONTH_NAME (SLASH YEAR)? )|
 (MONTH_NAME SLASH YEAR) 
)
:date
-->
 :date.TempDate = {rule = "DateSlash"}



Rule:	DateDash
// Wed 10-July-00
// 10-July 00
// 10-July

(  
 ((DAY_NAME (COMMA)?)?
  (NUM_OR_ORDINAL DASH MONTH_NAME (DASH)? YEAR)) |

 ((DAY_NAME (COMMA)?)?
  NUM_OR_ORDINAL DASH MONTH_NAME)
)
:date
-->
 :date.TempDate = {rule = "DateDash"}


Rule: 	DateName
Priority: 20
// Wed 10 July
// Wed 10 July, 2000
// Sun, 21 May 2000
// 10th of July, 2000
// 10 July
// 10th of July
// July, 2000

(
 (DAY_NAME NUM_OR_ORDINAL MONTH_NAME)|

 (DAY_NAME (COMMA)? 
  NUM_OR_ORDINAL MONTH_NAME ((COMMA)? YEAR)?) 
|

 ((DAY_NAME (COMMA)? )?
 NUM_OR_ORDINAL MONTH_NAME 
 ((COMMA)? YEAR)?)
|

 (NUM_OR_ORDINAL MONTH_NAME) 
| 
(MONTH_NAME (COMMA)? YEAR)
)
:date
-->
 :date.TempDate = {rule = "DateName"}


Rule: DateNameSpan1
// 5-20 Jan

(
 NUM_OR_ORDINAL
 {Token.string == "-"}
 (NUM_OR_ORDINAL MONTH_NAME ((COMMA)?  YEAR)?)
)
:date
-->
 :date.TempDate = {rule = "DateNameSpan1"}

Rule: DateNameSpan2
// Jan 5-20

(MONTH_NAME

 NUM_OR_ORDINAL 
 {Token.string == "-"}
 (NUM_OR_ORDINAL ((COMMA)?  YEAR)?)
)
:date
-->
 :date.TempDate = {rule = "DateNameSpan2"}

Rule: DateNameRev
// Wed. July 1st, 2000
// Wed, July 1, 2000
// Wed, July 1st, 2000
(         
 ((DAY_NAME (COMMA)? )?
  MONTH_NAME  
  ({Token.string == "the"})?
 NUM_OR_ORDINAL 
 ((COMMA)? YEAR)?) |
         
 (MONTH_NAME (COMMA)? YEAR)
)
:date
-->
 :date.TempDate = {rule = "DateNameRev"}


Rule:	DateNumDash
// 01-07-00
// Note: not 07-00
  
(
 (DAY_MONTH_NUM DASH DAY_MONTH_NUM DASH YEAR)
)
:date
-->
 :date.TempDate = {rule = "DateNumDash"}

Rule:	DateNumDashRev
// 00-07-01
// 2000-07

(
 (YEAR DASH DAY_MONTH_NUM DASH DAY_MONTH_NUM)|
 (FOUR_DIGIT DASH DAY_MONTH_NUM)
)
:date
-->
 :date.TempDate = {rule = "DateNumDashRev"}


Rule:	DateNumSlashDot
// 01/07/00
// Note: not 07/00

( 
DAY_MONTH_NUM (SLASH|DOT) DAY_MONTH_NUM (SLASH|DOT) YEAR
)
:date
-->
 :date.TempDate = {rule = "DateNumSlashDot"}


Rule: ModifierMonth
//early October

( DATE_PRE 
  {Lookup.minorType == month}
)
:date -->
 :date.TempDate = {rule = "ModifierMonth"}


Rule: YearAdBc

// 1900 AD
(
 (YEAR 
  AD_BC)
)
:year -->
 :year.YearTemp = {kind = "positive", rule = "YearAdBc"}

Rule: YearSpan1
// the early 90s
// the late 80s
// modified for the purposes of CYMRIE - Andreas Vlachidis February 2016

(
 {Token.string == "y"}
 {Token.string ==~ "[0-9]+(au)"}
 ({Token.string == "cynnar"}|{Token.string == "canol"}|{Token.string == "hwyr"})?
)
:date -->
 :date.TempDate = {rule = "YearSpan1"}

Rule: YearSpan2
// 1980/81

(
 (FOUR_DIGIT)
 ({Token.string == "/"}|
  {Token.string == "-"})
 (FOUR_DIGIT|TWO_DIGIT | ONE_DIGIT)
)
:date -->
 :date.TempDate = {rule = "YearSpan2"}

Rule: YearSpan3
Priority: 80

// from 1980 to 1981
// between 1980 and 1981
// modified for the purposes of CYMRIE - Andreas Vlachidis February 2016
(
 (({Token.string == "o"}|{Token.string == "O"})
  (FOUR_DIGIT)
  ({Token.string == "hyd"}{Token.string == "at"})
  (FOUR_DIGIT)
 ) |
  (({Token.string == "rhwng"}|{Token.string == "Rhwng"}) 
  (FOUR_DIGIT)
  {Token.string == "a"}
  (FOUR_DIGIT)
 )
)
:date -->
 :date.TempDate = {rule = "YearSpan3"}


Rule: YearContext1
Priority: 40
({Token.string == "yn"}|
 {Token.string == "erbyn"}
)
(YEAR)
:date -->
 :date.TempDate = {rule = "YearContext1"}


// Currently, temp1, temp2 and temp3 look good; temp4 is not to be counted
// but this may change according to the text
// only positives will be used in final grammar, not negatives

Rule: YearTemp1
Priority: 30
// (1987)

({Token.position == startpunct})
(FOUR_DIGIT)
:date
({Token.position == endpunct})
 -->
 :date.TempYear = {kind = "positive", rule = "TempYear1"}


Rule: TempYear2
Priority: 20
// 1987

(
 {Lookup.majorType == year}
)
:date -->
 :date.TempYear = {kind = "positive", rule = "TempYear2"}


Rule: TempYear3
Priority: 10
// yn 1922
({Token.string == "Yn"}|
 {Token.string == "yn"}|
 {Token.string == "erbyn"}|
 {Token.string == "Erbyn"}
)
(FOUR_DIGIT)
:date -->
 :date.TempYear = {kind = "positive", rule = "TempYear3"}

Rule: TempYear4
Priority: 10
// 1922

(FOUR_DIGIT)
:date -->
 :date.TempYear = {kind = "negative", rule = "TempYear4"}


Rule: TimeZone
// +0400
(
 (TIME_DIFF)
 (TIME_ZONE)?
)
:date
-->
 :date.TempZone = {rule = "TimeZone"}
